{"version":3,"file":"index.js","sources":["../ThirdClient.js","../AuthWrapper.js"],"sourcesContent":["import fetch from \"isomorphic-unfetch\";\r\nimport retry from \"async-retry\";\r\nimport axios from \"axios\";\r\nimport { SiweMessage } from \"siwe\";\r\n\r\n export class ThirdClient {\r\n  serverUrl;\r\n  encryptionAuthSig;\r\n  litNodeClient;\r\n  litJsSdk;\r\n  axios;\r\n  public;\r\n  private;\r\n  database;\r\n  ipfs;\r\n  ipns;\r\n\r\n  /**\r\n   * Initialize a new SDK Instance\r\n   * @param serverUrl\r\n   */\r\n  constructor(serverUrl) {\r\n    this.serverUrl = serverUrl;\r\n    axios.defaults.baseURL = serverUrl;\r\n    axios.defaults.withCredentials = true;\r\n\r\n    this.axios = axios;\r\n\r\n    this.public = new PublicClass(this);\r\n    this.private = new PrivateClass(this);\r\n    this.database = new DatabaseClass(this);\r\n    this.ipfs = new IPFSClass(this);\r\n    this.ipns = new IPNSClass(this);\r\n\r\n    this._initEncryption();\r\n  }\r\n\r\n  /**\r\n   * Method for authentication\r\n   * @param address //Wallet address\r\n   * @param chainId\r\n   * @param signMessageAsync //Method used to signMessage provided by Wagmi\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  async signIn(address, chainId, signMessageAsync) {\r\n    const nonceRes = await this.axios.get(\"/auth/nonce\");\r\n    const nonce = await nonceRes.data;\r\n\r\n    const message = new SiweMessage({\r\n      domain: window.location.host,\r\n      address: address,\r\n      statement: \"Sign in with Ethereum to the app.\",\r\n      uri: window.location.origin,\r\n      version: \"1\",\r\n      chainId,\r\n      nonce: nonce,\r\n    });\r\n\r\n    const signature = await signMessageAsync({\r\n      message: message.prepareMessage(),\r\n    });\r\n\r\n    const verifyRes = (\r\n      await this.axios.post(\r\n        \"auth/verify\",\r\n        { message, signature },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n    ).data;\r\n\r\n    if (!verifyRes.ok) {\r\n      throw new Error(\"Error verifying message\");\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current Signed Wallet\r\n   * @returns {Promise<*|boolean>} //Wallet address if authenticated else false\r\n   */\r\n  async signedInWallet() {\r\n    return (await this.axios.get(\"auth/me\")).data?.address ?? false;\r\n  }\r\n\r\n  /**\r\n   * Logout the current authenticated user\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  async signOut() {\r\n    await axios.post(\"/auth/logout\");\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Set a key for the current user\r\n   * @param key\r\n   * @param value\r\n   * @param isPrivate\r\n   * @returns {Promise<*>}\r\n   */\r\n  async set(key, value, isPrivate = false) {\r\n    value = isPrivate ? await this._encryptData(value, {}) : value;\r\n\r\n    return await this._serverFetch({\r\n      path: \"set\",\r\n      method: `POST`,\r\n      body: { key, value, type: isPrivate ? \"private\" : \"public\" },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get data for a given key\r\n   * @param key\r\n   * @param isPrivate\r\n   * @returns {Promise<{[p: string]: *}|*>}\r\n   */\r\n  async get(key, isPrivate = false) {\r\n    const rawData = await this._serverFetch({\r\n      path: `get?key=${key}&type=${isPrivate ? \"private\" : \"public\"}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    if (isPrivate && this._isEncryptedData(rawData)) {\r\n      const decryptedData = await this._decryptData(rawData.data, {});\r\n      return {\r\n        ...rawData,\r\n        data: decryptedData,\r\n      };\r\n    }\r\n\r\n    return rawData;\r\n  }\r\n\r\n  /**\r\n   * Sign message for encryption using LitJsSDK\r\n   * @returns {Promise<*>}\r\n   */\r\n  async signMessageForEncryption() {\r\n    if (typeof window === \"undefined\") {\r\n      throw new Error(\"Encryption messages can only be signed in the browser\");\r\n    }\r\n    this.encryptionAuthSig = await this.litJsSdk.checkAndSignAuthMessage({\r\n      chain: \"ethereum\",\r\n    });\r\n    return this.encryptionAuthSig;\r\n  }\r\n\r\n  /**\r\n   * Get current Encryption Auth Signature\r\n   * @returns {*}\r\n   */\r\n  getEncryptionAuthSignature() {\r\n    return this.encryptionAuthSig;\r\n  }\r\n\r\n  async _serverFetch({ path, method, body }) {\r\n    let res;\r\n\r\n    if (method === \"POST\") {\r\n      res = await this.axios.post(path, body);\r\n    } else {\r\n      res = await this.axios.get(path);\r\n    }\r\n\r\n    return res.data;\r\n  }\r\n\r\n  async _initEncryption() {\r\n    this.litJsSdk = await this._getLitSdkWithRetry();\r\n    this.litNodeClient = new this.litJsSdk.LitNodeClient({\r\n      debug: true,\r\n      alertWhenUnauthorized: typeof window !== \"undefined\",\r\n    });\r\n\r\n    await this.litNodeClient.connect({ debug: true });\r\n  }\r\n\r\n  async _getLitSdkWithRetry() {\r\n    // polyfill hack for lit sdk to work in browser\r\n    if (typeof window !== \"undefined\") {\r\n      window.global = globalThis;\r\n    }\r\n\r\n    const sdk = await retry(\r\n      async () => {\r\n        // @ts-ignore return the lit instance if it is defined on the client\r\n        if (typeof window !== \"undefined\" && window.LitJsSdk) {\r\n          // @ts-ignore\r\n          return window.LitJsSdk;\r\n        }\r\n\r\n        // @ts-ignore - TODO - declare types\r\n        const { default: LitJsSdk } = await import(\"lit-js-sdk\");\r\n        return LitJsSdk;\r\n      },\r\n      {\r\n        // retries: 5,\r\n        // factor: 2, // exponential\r\n        // maxTimeout: 5 * 60 * 1000, // 5 minutes\r\n      }\r\n    );\r\n\r\n    if (!sdk) {\r\n      throw new Error(\r\n        \"Failed to initialize encryption - lit sdk may not be installed\"\r\n      );\r\n    }\r\n\r\n    return sdk;\r\n  }\r\n\r\n  async _encryptData(dataToEncrypt, opts) {\r\n    if (!this.litJsSdk || !this.litNodeClient) {\r\n      throw new Error(\"Encryption not initialized\");\r\n    }\r\n\r\n    const stringified = JSON.stringify(dataToEncrypt);\r\n    const resp = await this.litJsSdk.encryptString(stringified);\r\n    if (!resp) {\r\n      throw new Error(\"Failed to encrypt\");\r\n    }\r\n    const { encryptedString, symmetricKey } = resp;\r\n    const authSig =\r\n      opts.overrideEncryptionAuthSig ||\r\n      this.encryptionAuthSig ||\r\n      (await this.signMessageForEncryption());\r\n\r\n    if (!authSig) {\r\n      throw new Error(\"Auth sig is not defined\");\r\n    }\r\n\r\n    // gate it to the connected user\r\n    const accessControlConditions = [\r\n      {\r\n        contractAddress: \"\",\r\n        standardContractType: \"\",\r\n        chain: \"ethereum\",\r\n        method: \"\",\r\n        parameters: [\":userAddress\"],\r\n        returnValueTest: {\r\n          comparator: \"=\",\r\n          value: authSig.address,\r\n        },\r\n      },\r\n    ];\r\n    const encryptedSymmetricKey = await this.litNodeClient.saveEncryptionKey({\r\n      accessControlConditions,\r\n      symmetricKey,\r\n      authSig,\r\n      chain: \"ethereum\",\r\n    });\r\n    const encryptedData = await this._getDataUrl(encryptedString);\r\n    return {\r\n      ownerAddress: authSig.address,\r\n      encryptedSymmetricKey: this.litJsSdk.uint8arrayToString(\r\n        encryptedSymmetricKey,\r\n        \"base16\"\r\n      ),\r\n      encryptedData,\r\n    };\r\n  }\r\n\r\n  async _decryptData(dataToDecrypt, opts = {}) {\r\n    if (!this.litJsSdk || !this.litNodeClient) {\r\n      throw new Error(\"Encryption not initialized\");\r\n    }\r\n\r\n    const {\r\n      encryptedData,\r\n      encryptedSymmetricKey,\r\n      ownerAddress,\r\n    } = dataToDecrypt;\r\n\r\n    const accessControlConditions = [\r\n      {\r\n        contractAddress: \"\",\r\n        standardContractType: \"\",\r\n        chain: \"ethereum\",\r\n        method: \"\",\r\n        parameters: [\":userAddress\"],\r\n        returnValueTest: {\r\n          comparator: \"=\",\r\n          value: ownerAddress,\r\n        },\r\n      },\r\n    ];\r\n\r\n    const authSig =\r\n      opts?.overrideEncryptionAuthSig ||\r\n      this.encryptionAuthSig ||\r\n      (await this.signMessageForEncryption());\r\n\r\n    const symmetricKey = await this.litNodeClient.getEncryptionKey({\r\n      accessControlConditions,\r\n      toDecrypt: encryptedSymmetricKey,\r\n      chain: \"ethereum\",\r\n      authSig,\r\n    });\r\n\r\n    const blob = await (await fetch(encryptedData)).blob();\r\n    const decryptedString = await this.litJsSdk.decryptString(\r\n      blob,\r\n      symmetricKey\r\n    );\r\n\r\n    if (!decryptedString) {\r\n      throw new Error(\"Failed to decrypt\");\r\n    }\r\n\r\n    return JSON.parse(decryptedString);\r\n  }\r\n\r\n  _isEncryptedData(maybeEncryptedData) {\r\n    return !!maybeEncryptedData?.data?.encryptedSymmetricKey;\r\n  }\r\n\r\n  _getDataUrl(blob) {\r\n    return new Promise((resolve) => {\r\n      const fr = new FileReader();\r\n\r\n      fr.addEventListener(\r\n        \"load\",\r\n        function () {\r\n          // convert image file to base64 string\r\n          resolve(fr.result?.toString() || \"\");\r\n        },\r\n        false\r\n      );\r\n\r\n      fr.readAsDataURL(blob);\r\n    });\r\n  }\r\n}\r\n\r\nclass PublicClass {\r\n  client;\r\n  constructor(client) {\r\n    this.client = client;\r\n  }\r\n\r\n  async set(key, value) {\r\n    return this.client.set(key, value, false);\r\n  }\r\n\r\n  async get(key) {\r\n    return this.client.get(key, false);\r\n  }\r\n}\r\n\r\nclass PrivateClass {\r\n  client;\r\n  constructor(client) {\r\n    this.client = client;\r\n  }\r\n\r\n  async set(key, value) {\r\n    return this.client.set(key, value, true);\r\n  }\r\n\r\n  async get(key) {\r\n    return this.client.get(key, true);\r\n  }\r\n}\r\n\r\nclass DatabaseClass {\r\n  client;\r\n  constructor(client) {\r\n    this.client = client;\r\n  }\r\n\r\n  async set(key, value) {\r\n    return (\r\n      await this.client.axios.post(\r\n        \"db/set\",\r\n        { key, value },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n    ).data.data[key];\r\n  }\r\n\r\n  async get(key) {\r\n    return (\r\n      (\r\n        await this.client.axios.get(\"db/get\", {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        })\r\n      ).data.data[key] ?? null\r\n    );\r\n  }\r\n}\r\n\r\nclass IPFSClass {\r\n  client;\r\n  constructor(client) {\r\n    this.client = client;\r\n  }\r\n\r\n  async set(key, file) {\r\n    let data = new FormData();\r\n    data.append(\"key\", key);\r\n    data.append(\"file\", file);\r\n    return (\r\n      await this.client.axios.post(\"storage/set\", data, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n    ).data.cid;\r\n  }\r\n\r\n  async get(key) {\r\n    return (\r\n      (\r\n        await this.client.axios.get(\"storage/get\", {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        })\r\n      ).data?.data?.filter((file) => file.name === key)[0].cid ?? null\r\n    );\r\n  }\r\n}\r\n\r\nclass IPNSClass {\r\n  client;\r\n  constructor(client) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * Creates a new IPNS name, stores the file in IPFS and stores its CID in the generated name\r\n   * @param key\r\n   * @param file\r\n   * @returns {Promise<*>}\r\n   */\r\n  async set(key, file) {\r\n    let data = new FormData();\r\n    data.append(\"key\", key);\r\n    data.append(\"file\", file);\r\n    return (\r\n      await this.client.axios.post(\"storage/ipns/set\", data, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n    ).data.name;\r\n  }\r\n\r\n  async get(key) {\r\n    return (\r\n      (\r\n        await this.client.axios.get(\"storage/ipns/get\", {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        })\r\n      ).data?.data?.filter((file) => file.name === key)[0].value ?? null\r\n    );\r\n  }\r\n}\r\n","import { WagmiConfig, createClient, configureChains } from \"wagmi\";\nimport {\n  EthereumClient,\n  modalConnectors,\n  walletConnectProvider,\n} from \"@web3modal/ethereum\";\nimport { Web3Modal } from \"@web3modal/react\";\nimport { mainnet } from \"wagmi/chains\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { Children } from \"react\";\n\nexport function AuthWrapper({\n  children,\n  appName = \"Third Storage\",\n  walletConnectProjectId = null,\n  arcanaAppId = null,\n}) {\n  const chains = [mainnet];\n  const { provider } = configureChains(chains, [\n    walletConnectProvider({ projectId: walletConnectProjectId }),\n    publicProvider(),\n  ]);\n\n  const connector = (chains) => {\n    return new ArcanaConnector({\n      chains,\n      options: {\n        appId: arcanaAppId,\n      },\n    });\n  };\n\n  const client = createClient({\n    autoConnect: true,\n    connectors: [\n      ...modalConnectors({\n        appName: appName,\n        chains,\n      }),\n      connector(chains),\n    ],\n    provider,\n  });\n\n  const ethereumClient = new EthereumClient(client, chains);\n\n  return (\n    <div>\n      <WagmiConfig client={client}>\n        {Children.map(children, (child) => ({ child }))}\n      </WagmiConfig>\n      <Web3Modal\n        projectId={walletConnectProjectId}\n        ethereumClient={ethereumClient}\n      />\n    </div>\n  );\n}\n"],"names":["ThirdClient","constructor","serverUrl","axios","defaults","baseURL","withCredentials","public","PublicClass","private","PrivateClass","database","DatabaseClass","ipfs","IPFSClass","ipns","IPNSClass","_initEncryption","signIn","address","chainId","signMessageAsync","nonceRes","get","nonce","data","message","SiweMessage","domain","window","location","host","statement","uri","origin","version","signature","prepareMessage","verifyRes","post","headers","ok","Error","signedInWallet","signOut","set","key","value","isPrivate","_encryptData","_serverFetch","path","method","body","type","rawData","_isEncryptedData","decryptedData","_decryptData","signMessageForEncryption","encryptionAuthSig","litJsSdk","checkAndSignAuthMessage","chain","getEncryptionAuthSignature","res","_getLitSdkWithRetry","litNodeClient","LitNodeClient","debug","alertWhenUnauthorized","connect","global","globalThis","sdk","retry","LitJsSdk","default","dataToEncrypt","opts","stringified","JSON","stringify","resp","encryptString","encryptedString","symmetricKey","authSig","overrideEncryptionAuthSig","accessControlConditions","contractAddress","standardContractType","parameters","returnValueTest","comparator","encryptedSymmetricKey","saveEncryptionKey","encryptedData","_getDataUrl","ownerAddress","uint8arrayToString","dataToDecrypt","getEncryptionKey","toDecrypt","blob","fetch","decryptedString","decryptString","parse","maybeEncryptedData","Promise","resolve","fr","FileReader","addEventListener","result","toString","readAsDataURL","client","file","FormData","append","cid","filter","name","AuthWrapper","children","appName","walletConnectProjectId","arcanaAppId","chains","mainnet","provider","configureChains","walletConnectProvider","projectId","publicProvider","connector","ArcanaConnector","options","appId","createClient","autoConnect","connectors","modalConnectors","ethereumClient","EthereumClient","_jsxs","_jsx","WagmiConfig","Children","map","child","Web3Modal"],"mappings":"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"}